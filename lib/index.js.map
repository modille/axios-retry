{"version":3,"sources":["../es/index.js"],"names":["isNetworkError","isSafeRequestError","isIdempotentRequestError","isNetworkOrIdempotentRequestError","noDelay","exponentialDelay","axiosRetry","namespace","error","response","Boolean","code","SAFE_HTTP_METHODS","IDEMPOTENT_HTTP_METHODS","concat","isRetryableError","status","config","indexOf","method","retryNumber","Math","pow","floor","random","getCurrentState","currentState","retryCount","getRequestOptions","defaultOptions","Object","assign","fixConfig","axios","defaults","agent","httpAgent","httpsAgent","interceptors","request","use","lastRequestTime","Date","now","Promise","reject","retries","retryCondition","delayStrategy","shouldRetry","timeout","lastRequestDuration","max","resolve","setTimeout"],"mappings":"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","file":"index.js","sourcesContent":["import isRetryAllowed from 'is-retry-allowed';\n\nconst namespace = 'axios-retry';\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isNetworkError(error) {\n  return !error.response\n    && Boolean(error.code) // Prevents retrying cancelled requests\n    && error.code !== 'ECONNABORTED' // Prevents retrying timed out requests\n    && isRetryAllowed(error); // Prevents retrying unsafe errors\n}\n\nconst SAFE_HTTP_METHODS = ['get', 'head', 'options'];\nconst IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nfunction isRetryableError(error) {\n  return error.code !== 'ECONNABORTED'\n    && (!error.response || (error.response.status >= 500 && error.response.status <= 599));\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isSafeRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isIdempotentRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isNetworkOrIdempotentRequestError(error) {\n  return isNetworkError(error) || isIdempotentRequestError(error);\n}\n\n/**\n * @return {number} - delay in milliseconds, always 1\n */\nexport function noDelay() {\n  return 1;\n}\n\n/**\n * @param  {number} [retryNumber=0]\n * @return {number} - delay in milliseconds\n */\nexport function exponentialDelay(retryNumber = 0) {\n  return (Math.pow(2, retryNumber) * 1000) + Math.floor(Math.random() * 1000);\n}\n\n/**\n * Initializes and returns the retry state for the given request/config\n * @param  {AxiosRequestConfig} config\n * @return {Object}\n */\nfunction getCurrentState(config) {\n  const currentState = config[namespace] || {};\n  currentState.retryCount = currentState.retryCount || 0;\n  config[namespace] = currentState;\n  return currentState;\n}\n\n/**\n * Returns the axios-retry options for the current request\n * @param  {AxiosRequestConfig} config\n * @param  {AxiosRetryConfig} defaultOptions\n * @return {AxiosRetryConfig}\n */\nfunction getRequestOptions(config, defaultOptions) {\n  return Object.assign({}, defaultOptions, config[namespace]);\n}\n\n/**\n * @param  {Axios} axios\n * @param  {AxiosRequestConfig} config\n */\nfunction fixConfig(axios, config) {\n  if (axios.defaults.agent === config.agent) {\n    delete config.agent;\n  }\n  if (axios.defaults.httpAgent === config.httpAgent) {\n    delete config.httpAgent;\n  }\n  if (axios.defaults.httpsAgent === config.httpsAgent) {\n    delete config.httpsAgent;\n  }\n}\n\n/**\n * Adds response interceptors to an axios instance to retry requests failed due to network issues\n *\n * @example\n *\n * import axios from 'axios';\n *\n * axiosRetry(axios, { retries: 3 });\n *\n * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Also works with custom axios instances\n * const client = axios.create({ baseURL: 'http://example.com' });\n * axiosRetry(client, { retries: 3 });\n *\n * client.get('/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Allows request-specific configuration\n * client\n *   .get('/test', {\n *     'axios-retry': {\n *       retries: 0\n *     }\n *   })\n *   .catch(error => { // The first request fails\n *     error !== undefined\n *   });\n *\n * @param {Axios} axios An axios instance (the axios object or one created from axios.create)\n * @param {Object} [defaultOptions]\n * @param {number} [defaultOptions.retries=3] Number of retries\n * @param {number} [defaultOptions.retryCondition=isNetworkOrIdempotentRequestError]\n *        A function to determine if the error can be retried\n */\nexport default function axiosRetry(axios, defaultOptions) {\n  axios.interceptors.request.use((config) => {\n    const currentState = getCurrentState(config);\n    currentState.lastRequestTime = Date.now();\n    return config;\n  });\n\n  axios.interceptors.response.use(null, error => {\n    const config = error.config;\n\n    // If we have no information to retry the request\n    if (!config) {\n      return Promise.reject(error);\n    }\n\n    const {\n      retries = 3,\n      retryCondition = isNetworkOrIdempotentRequestError,\n      delayStrategy = noDelay\n    } = getRequestOptions(config, defaultOptions);\n\n    const currentState = getCurrentState(config);\n\n    const shouldRetry = retryCondition(error)\n      && currentState.retryCount < retries;\n\n    if (shouldRetry) {\n      currentState.retryCount++;\n\n      // Axios fails merging this configuration to the default configuration because it has an issue\n      // with circular structures: https://github.com/mzabriskie/axios/issues/370\n      fixConfig(axios, config);\n\n      if (config.timeout && currentState.lastRequestTime) {\n        const lastRequestDuration = Date.now() - currentState.lastRequestTime;\n        // Minimum 1ms timeout (passing 0 or less to XHR means no timeout)\n        config.timeout = Math.max(config.timeout - lastRequestDuration, 1);\n      }\n\n      return new Promise((resolve) =>\n        setTimeout(() => resolve(axios(config)), delayStrategy(currentState.retryCount))\n      );\n    }\n\n    return Promise.reject(error);\n  });\n}\n\n// Compatibility with CommonJS\naxiosRetry.isNetworkError = isNetworkError;\naxiosRetry.isSafeRequestError = isSafeRequestError;\naxiosRetry.isIdempotentRequestError = isIdempotentRequestError;\naxiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\naxiosRetry.noDelay = noDelay;\naxiosRetry.exponentialDelay = exponentialDelay;\n"]}